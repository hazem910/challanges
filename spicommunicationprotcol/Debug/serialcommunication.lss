
serialcommunication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f90  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080f  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000074f  00000000  00000000  00001c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000037cd  00000000  00000000  0000249c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000090f  00000000  00000000  00005c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00006578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00001000  00000000  00000000  00006600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	80 d0       	rcall	.+256    	; 0x162 <main>
  62:	3c c1       	rjmp	.+632    	; 0x2dc <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <gpioPinDirection>:
 * @param direction: set the pins direction and takes the following values
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction){
	switch(u8_port){
  66:	81 30       	cpi	r24, 0x01	; 1
  68:	89 f0       	breq	.+34     	; 0x8c <gpioPinDirection+0x26>
  6a:	28 f0       	brcs	.+10     	; 0x76 <gpioPinDirection+0x10>
  6c:	82 30       	cpi	r24, 0x02	; 2
  6e:	c9 f0       	breq	.+50     	; 0xa2 <gpioPinDirection+0x3c>
  70:	83 30       	cpi	r24, 0x03	; 3
  72:	11 f1       	breq	.+68     	; 0xb8 <gpioPinDirection+0x52>
  74:	2c c0       	rjmp	.+88     	; 0xce <gpioPinDirection+0x68>
	case (GPIOA):
		if(u8_direction == OUTPUT)
  76:	4f 3f       	cpi	r20, 0xFF	; 255
  78:	21 f4       	brne	.+8      	; 0x82 <gpioPinDirection+0x1c>
			PORTA_DIR |= u8_pins;
  7a:	8a b3       	in	r24, 0x1a	; 26
  7c:	68 2b       	or	r22, r24
  7e:	6a bb       	out	0x1a, r22	; 26
  80:	08 95       	ret
		else
			PORTA_DIR &= ~u8_pins;
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	60 95       	com	r22
  86:	68 23       	and	r22, r24
  88:	6a bb       	out	0x1a, r22	; 26
  8a:	08 95       	ret
		break;
	case (GPIOB):
		if(u8_direction == OUTPUT)
  8c:	4f 3f       	cpi	r20, 0xFF	; 255
  8e:	21 f4       	brne	.+8      	; 0x98 <gpioPinDirection+0x32>
			PORTB_DIR |= u8_pins;
  90:	87 b3       	in	r24, 0x17	; 23
  92:	68 2b       	or	r22, r24
  94:	67 bb       	out	0x17, r22	; 23
  96:	08 95       	ret
		else
			PORTB_DIR &= ~u8_pins;
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	60 95       	com	r22
  9c:	68 23       	and	r22, r24
  9e:	67 bb       	out	0x17, r22	; 23
  a0:	08 95       	ret
		break;
	case (GPIOC):
		if(u8_direction == OUTPUT)
  a2:	4f 3f       	cpi	r20, 0xFF	; 255
  a4:	21 f4       	brne	.+8      	; 0xae <gpioPinDirection+0x48>
			PORTC_DIR |= u8_pins;
  a6:	84 b3       	in	r24, 0x14	; 20
  a8:	68 2b       	or	r22, r24
  aa:	64 bb       	out	0x14, r22	; 20
  ac:	08 95       	ret
		else
			PORTC_DIR &= ~u8_pins;
  ae:	84 b3       	in	r24, 0x14	; 20
  b0:	60 95       	com	r22
  b2:	68 23       	and	r22, r24
  b4:	64 bb       	out	0x14, r22	; 20
  b6:	08 95       	ret
		break;
	case (GPIOD):
		if(u8_direction == OUTPUT)
  b8:	4f 3f       	cpi	r20, 0xFF	; 255
  ba:	21 f4       	brne	.+8      	; 0xc4 <gpioPinDirection+0x5e>
			PORTD_DIR |= u8_pins;
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	68 2b       	or	r22, r24
  c0:	61 bb       	out	0x11, r22	; 17
  c2:	08 95       	ret
		else
			PORTD_DIR &= ~u8_pins;
  c4:	81 b3       	in	r24, 0x11	; 17
  c6:	60 95       	com	r22
  c8:	68 23       	and	r22, r24
  ca:	61 bb       	out	0x11, r22	; 17
  cc:	08 95       	ret
		break;
	default: // PORTA
		if(u8_direction == OUTPUT)
  ce:	4f 3f       	cpi	r20, 0xFF	; 255
  d0:	21 f4       	brne	.+8      	; 0xda <gpioPinDirection+0x74>
			PORTA_DIR |= u8_pins;
  d2:	8a b3       	in	r24, 0x1a	; 26
  d4:	68 2b       	or	r22, r24
  d6:	6a bb       	out	0x1a, r22	; 26
  d8:	08 95       	ret
		else
			PORTA_DIR &= ~u8_pins;
  da:	8a b3       	in	r24, 0x1a	; 26
  dc:	60 95       	com	r22
  de:	68 23       	and	r22, r24
  e0:	6a bb       	out	0x1a, r22	; 26
  e2:	08 95       	ret

000000e4 <gpioPinWrite>:
 * 				- BIT6
 * 				- BIT7
 * @param value
 */
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value){
	switch(u8_port){
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	89 f0       	breq	.+34     	; 0x10a <gpioPinWrite+0x26>
  e8:	28 f0       	brcs	.+10     	; 0xf4 <gpioPinWrite+0x10>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	c9 f0       	breq	.+50     	; 0x120 <gpioPinWrite+0x3c>
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	11 f1       	breq	.+68     	; 0x136 <gpioPinWrite+0x52>
  f2:	2c c0       	rjmp	.+88     	; 0x14c <gpioPinWrite+0x68>
	case (GPIOA):
		if(u8_value == HIGH)
  f4:	4f 3f       	cpi	r20, 0xFF	; 255
  f6:	21 f4       	brne	.+8      	; 0x100 <gpioPinWrite+0x1c>
			PORTA_DATA |= u8_pins;
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	68 2b       	or	r22, r24
  fc:	6b bb       	out	0x1b, r22	; 27
  fe:	08 95       	ret
		else
			PORTA_DATA &= ~u8_pins;
 100:	8b b3       	in	r24, 0x1b	; 27
 102:	60 95       	com	r22
 104:	68 23       	and	r22, r24
 106:	6b bb       	out	0x1b, r22	; 27
 108:	08 95       	ret
		break;
	case (GPIOB):
		if(u8_value == HIGH)
 10a:	4f 3f       	cpi	r20, 0xFF	; 255
 10c:	21 f4       	brne	.+8      	; 0x116 <gpioPinWrite+0x32>
			PORTB_DATA |= u8_pins;
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	68 2b       	or	r22, r24
 112:	68 bb       	out	0x18, r22	; 24
 114:	08 95       	ret
		else
			PORTB_DATA &= ~u8_pins;
 116:	88 b3       	in	r24, 0x18	; 24
 118:	60 95       	com	r22
 11a:	68 23       	and	r22, r24
 11c:	68 bb       	out	0x18, r22	; 24
 11e:	08 95       	ret
		break;
	case (GPIOC):
		if(u8_value == HIGH)
 120:	4f 3f       	cpi	r20, 0xFF	; 255
 122:	21 f4       	brne	.+8      	; 0x12c <gpioPinWrite+0x48>
			PORTC_DATA |= u8_pins;
 124:	85 b3       	in	r24, 0x15	; 21
 126:	68 2b       	or	r22, r24
 128:	65 bb       	out	0x15, r22	; 21
 12a:	08 95       	ret
		else
			PORTC_DATA &= ~u8_pins;
 12c:	85 b3       	in	r24, 0x15	; 21
 12e:	60 95       	com	r22
 130:	68 23       	and	r22, r24
 132:	65 bb       	out	0x15, r22	; 21
 134:	08 95       	ret
		break;
	case (GPIOD):
		if(u8_value == HIGH)
 136:	4f 3f       	cpi	r20, 0xFF	; 255
 138:	21 f4       	brne	.+8      	; 0x142 <gpioPinWrite+0x5e>
			PORTD_DATA |= u8_pins;
 13a:	82 b3       	in	r24, 0x12	; 18
 13c:	68 2b       	or	r22, r24
 13e:	62 bb       	out	0x12, r22	; 18
 140:	08 95       	ret
		else
			PORTD_DATA &= ~u8_pins;
 142:	82 b3       	in	r24, 0x12	; 18
 144:	60 95       	com	r22
 146:	68 23       	and	r22, r24
 148:	62 bb       	out	0x12, r22	; 18
 14a:	08 95       	ret
		break;
	default: // PORTA
		if(u8_value == HIGH)
 14c:	4f 3f       	cpi	r20, 0xFF	; 255
 14e:	21 f4       	brne	.+8      	; 0x158 <gpioPinWrite+0x74>
			PORTA_DATA |= u8_pins;
 150:	8b b3       	in	r24, 0x1b	; 27
 152:	68 2b       	or	r22, r24
 154:	6b bb       	out	0x1b, r22	; 27
 156:	08 95       	ret
		else
			PORTA_DATA &= ~u8_pins;
 158:	8b b3       	in	r24, 0x1b	; 27
 15a:	60 95       	com	r22
 15c:	68 23       	and	r22, r24
 15e:	6b bb       	out	0x1b, r22	; 27
 160:	08 95       	ret

00000162 <main>:
 */ 

#include "Spi.h"
#include "softwareDelay.h"
int main (void)
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	28 97       	sbiw	r28, 0x08	; 8
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
	ST_S_SPI_Configuration spistr1={
		 spistr1.SLAVE_MODE=SPI_MASTER,
 176:	80 e1       	ldi	r24, 0x10	; 16
 178:	89 83       	std	Y+1, r24	; 0x01
		 spistr1.INT_ENABLE=SPI_INT_OFF,
 17a:	1e 82       	std	Y+6, r1	; 0x06
		 spistr1.PRESCALAR=SPI_Fosc16,
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	8a 83       	std	Y+2, r24	; 0x02
		 spistr1.DOUBLE_SPEED=SPI_DOUBLE_SPEED_MODE_OFF,
 180:	1c 82       	std	Y+4, r1	; 0x04
		 spistr1.ENABLE=SPI_ENABLE_ON,
 182:	80 e4       	ldi	r24, 0x40	; 64
 184:	8b 83       	std	Y+3, r24	; 0x03
		 spistr1.SAMPLING_EDGE=SPI_RISING,
 186:	1d 82       	std	Y+5, r1	; 0x05
		 spistr1.DATA_ORDER=SPI_LSB_FISRT,
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	8f 83       	std	Y+7, r24	; 0x07
		 spistr1.clock_phase=leading_EDGE
 18c:	18 86       	std	Y+8, r1	; 0x08
		 };
	SPI_Init(&spistr1);
 18e:	ce 01       	movw	r24, r28
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	27 d0       	rcall	.+78     	; 0x1e2 <SPI_Init>


	softwareDelayMs(2000);
 194:	60 ed       	ldi	r22, 0xD0	; 208
 196:	77 e0       	ldi	r23, 0x07	; 7
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	08 d0       	rcall	.+16     	; 0x1ae <softwareDelayMs>
	while(1){
		
			SPI_Transceiver(20);
 19e:	84 e1       	ldi	r24, 0x14	; 20
 1a0:	90 d0       	rcall	.+288    	; 0x2c2 <SPI_Transceiver>
 1a2:	68 ee       	ldi	r22, 0xE8	; 232
			softwareDelayMs(1000);
 1a4:	73 e0       	ldi	r23, 0x03	; 3
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 d0       	rcall	.+2      	; 0x1ae <softwareDelayMs>
 1ac:	f8 cf       	rjmp	.-16     	; 0x19e <main+0x3c>

000001ae <softwareDelayMs>:
 1ae:	ab 01       	movw	r20, r22

#include "softwareDelay.h"

/* this is the implementation of software delay function*/

void softwareDelayMs(uint32_t u32_delay_in_ms){
 1b0:	bc 01       	movw	r22, r24
	
	for (uint16_t counter=0;counter<u32_delay_in_ms;counter++){
 1b2:	41 15       	cp	r20, r1
 1b4:	51 05       	cpc	r21, r1
 1b6:	61 05       	cpc	r22, r1
 1b8:	71 05       	cpc	r23, r1
 1ba:	71 f4       	brne	.+28     	; 0x1d8 <softwareDelayMs+0x2a>
 1bc:	08 95       	ret
 1be:	01 97       	sbiw	r24, 0x01	; 1
		for(uint16_t internalcounter=0;internalcounter<1000;internalcounter++){
 1c0:	f1 f7       	brne	.-4      	; 0x1be <softwareDelayMs+0x10>

/* this is the implementation of software delay function*/

void softwareDelayMs(uint32_t u32_delay_in_ms){
	
	for (uint16_t counter=0;counter<u32_delay_in_ms;counter++){
 1c2:	2f 5f       	subi	r18, 0xFF	; 255
 1c4:	3f 4f       	sbci	r19, 0xFF	; 255
 1c6:	c9 01       	movw	r24, r18
 1c8:	a0 e0       	ldi	r26, 0x00	; 0
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	84 17       	cp	r24, r20
 1ce:	95 07       	cpc	r25, r21
 1d0:	a6 07       	cpc	r26, r22
 1d2:	b7 07       	cpc	r27, r23
 1d4:	18 f0       	brcs	.+6      	; 0x1dc <softwareDelayMs+0x2e>
 1d6:	08 95       	ret
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0

#include "softwareDelay.h"

/* this is the implementation of software delay function*/

void softwareDelayMs(uint32_t u32_delay_in_ms){
 1dc:	88 ee       	ldi	r24, 0xE8	; 232
 1de:	93 e0       	ldi	r25, 0x03	; 3
 1e0:	ee cf       	rjmp	.-36     	; 0x1be <softwareDelayMs+0x10>

000001e2 <SPI_Init>:
params:pointer to config struct 
return :void 
*******************************************************************/


void SPI_Init(ST_S_SPI_Configuration *spi_Config){
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
	
	/********************Enable SPI Interrupt ******************/
	
	SPCR|=SPI_ENABLE_ON;
 1e8:	6e 9a       	sbi	0x0d, 6	; 13
	
	/*******************Data Order******************/
	if (spi_Config->DATA_ORDER == SPI_LSB_FISRT)
 1ea:	8e 81       	ldd	r24, Y+6	; 0x06
 1ec:	80 32       	cpi	r24, 0x20	; 32
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <SPI_Init+0x12>
	SPCR|=SPI_LSB_FISRT;
 1f0:	6d 9a       	sbi	0x0d, 5	; 13
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <SPI_Init+0x1a>
	else if (spi_Config->DATA_ORDER == SPI_MSB_FISRT)
 1f4:	81 11       	cpse	r24, r1
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <SPI_Init+0x1a>
	SPCR|=SPI_MSB_FISRT;
 1f8:	8d b1       	in	r24, 0x0d	; 13
 1fa:	8d b9       	out	0x0d, r24	; 13
	/********************Master Slave Select ******************/
	if (spi_Config->SLAVE_MODE == SPI_MASTER)
 1fc:	88 81       	ld	r24, Y
 1fe:	80 31       	cpi	r24, 0x10	; 16
 200:	71 f5       	brne	.+92     	; 0x25e <SPI_Init+0x7c>
	{SPCR|=SPI_MASTER;
 202:	6c 9a       	sbi	0x0d, 4	; 13
	/********************SPI pre-scalar in case of master ******************/
		switch(spi_Config->PRESCALAR){
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	49 f0       	breq	.+18     	; 0x21c <SPI_Init+0x3a>
 20a:	28 f0       	brcs	.+10     	; 0x216 <SPI_Init+0x34>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	41 f0       	breq	.+16     	; 0x220 <SPI_Init+0x3e>
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	41 f0       	breq	.+16     	; 0x224 <SPI_Init+0x42>
 214:	0a c0       	rjmp	.+20     	; 0x22a <SPI_Init+0x48>
			case SPI_Fosc4:
			              SPCR|=SPI_Fosc4;
 216:	8d b1       	in	r24, 0x0d	; 13
 218:	8d b9       	out	0x0d, r24	; 13
				          break;
 21a:	07 c0       	rjmp	.+14     	; 0x22a <SPI_Init+0x48>
			case  SPI_Fosc16:
			                SPCR|=SPI_Fosc16;
 21c:	68 9a       	sbi	0x0d, 0	; 13
							break;
 21e:	05 c0       	rjmp	.+10     	; 0x22a <SPI_Init+0x48>
			case SPI_Fosc64:
			                SPCR|=SPI_Fosc64;
 220:	69 9a       	sbi	0x0d, 1	; 13
							break;
 222:	03 c0       	rjmp	.+6      	; 0x22a <SPI_Init+0x48>
			case SPI_Fosc128:
			                SPCR|=SPI_Fosc128;
 224:	8d b1       	in	r24, 0x0d	; 13
 226:	83 60       	ori	r24, 0x03	; 3
 228:	8d b9       	out	0x0d, r24	; 13
			       break;				
							 								   	   
		}
		/********************Double SPI speed if master******************/

		if (spi_Config->DOUBLE_SPEED == SPI_DOUBLE_SPEED_MODE_ON)
 22a:	8b 81       	ldd	r24, Y+3	; 0x03
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	11 f4       	brne	.+4      	; 0x234 <SPI_Init+0x52>
		SPSR|=SPI_DOUBLE_SPEED_MODE_ON;
 230:	70 9a       	sbi	0x0e, 0	; 14
 232:	04 c0       	rjmp	.+8      	; 0x23c <SPI_Init+0x5a>
		else if (spi_Config->DOUBLE_SPEED == SPI_DOUBLE_SPEED_MODE_OFF)
 234:	81 11       	cpse	r24, r1
 236:	02 c0       	rjmp	.+4      	; 0x23c <SPI_Init+0x5a>
		SPSR|=SPI_DOUBLE_SPEED_MODE_OFF;
 238:	8e b1       	in	r24, 0x0e	; 14
 23a:	8e b9       	out	0x0e, r24	; 14
		/*********************MASTER_Port****************************/
		gpioPinDirection(MISO_PORT,MISO_PIN,INPUT);
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	60 e4       	ldi	r22, 0x40	; 64
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	11 df       	rcall	.-478    	; 0x66 <gpioPinDirection>
		gpioPinDirection(MOSI_PORT,MOSI_PIN,OUTPUT);
 244:	4f ef       	ldi	r20, 0xFF	; 255
 246:	60 e2       	ldi	r22, 0x20	; 32
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0d df       	rcall	.-486    	; 0x66 <gpioPinDirection>
		gpioPinDirection(SCK_PORT,SCK_PIN,OUTPUT);
 24c:	4f ef       	ldi	r20, 0xFF	; 255
 24e:	60 e8       	ldi	r22, 0x80	; 128
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	09 df       	rcall	.-494    	; 0x66 <gpioPinDirection>
		gpioPinDirection(SS_PORT,SS_PIN,OUTPUT);
 254:	4f ef       	ldi	r20, 0xFF	; 255
 256:	60 e1       	ldi	r22, 0x10	; 16
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	05 df       	rcall	.-502    	; 0x66 <gpioPinDirection>
 25c:	14 c0       	rjmp	.+40     	; 0x286 <SPI_Init+0xa4>
		
	}
	else if (spi_Config->SLAVE_MODE == SPI_SLAVE){
 25e:	81 11       	cpse	r24, r1
 260:	12 c0       	rjmp	.+36     	; 0x286 <SPI_Init+0xa4>
	SPCR|=SPI_SLAVE;
 262:	8d b1       	in	r24, 0x0d	; 13
	/*********************Slave_Port****************************/

	gpioPinDirection(MISO_PORT,MISO_PIN,OUTPUT);
 264:	8d b9       	out	0x0d, r24	; 13
 266:	4f ef       	ldi	r20, 0xFF	; 255
 268:	60 e4       	ldi	r22, 0x40	; 64
 26a:	81 e0       	ldi	r24, 0x01	; 1
	gpioPinDirection(MOSI_PORT,MOSI_PIN,INPUT);
 26c:	fc de       	rcall	.-520    	; 0x66 <gpioPinDirection>
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	60 e2       	ldi	r22, 0x20	; 32
 272:	81 e0       	ldi	r24, 0x01	; 1
	gpioPinDirection(SCK_PORT,SCK_PIN,INPUT);
 274:	f8 de       	rcall	.-528    	; 0x66 <gpioPinDirection>
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	60 e8       	ldi	r22, 0x80	; 128
 27a:	81 e0       	ldi	r24, 0x01	; 1
	gpioPinDirection(SS_PORT,SS_PIN,INPUT);
 27c:	f4 de       	rcall	.-536    	; 0x66 <gpioPinDirection>
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	60 e1       	ldi	r22, 0x10	; 16
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	f0 de       	rcall	.-544    	; 0x66 <gpioPinDirection>
	}

	

	/********************clock ploarity******************/
	if (spi_Config->SAMPLING_EDGE == SPI_RISING)
 286:	8c 81       	ldd	r24, Y+4	; 0x04
 288:	81 11       	cpse	r24, r1
 28a:	03 c0       	rjmp	.+6      	; 0x292 <SPI_Init+0xb0>
	 SPCR|=SPI_RISING;
 28c:	8d b1       	in	r24, 0x0d	; 13
 28e:	8d b9       	out	0x0d, r24	; 13
 290:	03 c0       	rjmp	.+6      	; 0x298 <SPI_Init+0xb6>
	else if (spi_Config->SAMPLING_EDGE == SPI_FALLING)
 292:	88 30       	cpi	r24, 0x08	; 8
 294:	09 f4       	brne	.+2      	; 0x298 <SPI_Init+0xb6>
	 SPCR|=SPI_FALLING;
 296:	6b 9a       	sbi	0x0d, 3	; 13

	
	

	/********************Enable SPI ******************/
	if (spi_Config->ENABLE == SPI_ENABLE_ON)
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	80 34       	cpi	r24, 0x40	; 64
 29c:	11 f4       	brne	.+4      	; 0x2a2 <SPI_Init+0xc0>
	SPCR|=SPI_ENABLE_ON;
 29e:	6e 9a       	sbi	0x0d, 6	; 13
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <SPI_Init+0xc8>
	else if (spi_Config->ENABLE == SPI_ENABLE_OFF)
 2a2:	81 11       	cpse	r24, r1
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <SPI_Init+0xc8>
	SPCR|=SPI_ENABLE_OFF;
 2a6:	8d b1       	in	r24, 0x0d	; 13
 2a8:	8d b9       	out	0x0d, r24	; 13
	/*********************Clock_Phase******************/
	if(spi_Config->clock_phase==leading_EDGE)
 2aa:	8f 81       	ldd	r24, Y+7	; 0x07
 2ac:	81 11       	cpse	r24, r1
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <SPI_Init+0xd4>
	SPCR|=leading_EDGE;
 2b0:	8d b1       	in	r24, 0x0d	; 13
 2b2:	8d b9       	out	0x0d, r24	; 13
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <SPI_Init+0xda>
	else if(spi_Config->clock_phase==trailing_EDGE)
 2b6:	84 30       	cpi	r24, 0x04	; 4
 2b8:	09 f4       	brne	.+2      	; 0x2bc <SPI_Init+0xda>
	SPCR|=trailing_EDGE;
 2ba:	6a 9a       	sbi	0x0d, 2	; 13
	
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <SPI_Transceiver>:
params: data wants to transfer
return :data  Received
*******************************************************************/


uint8_t  SPI_Transceiver(uint8_t Copy_u8Data){
 2c2:	cf 93       	push	r28
 2c4:	c8 2f       	mov	r28, r24
	gpioPinWrite(SS_PORT,SS_PIN,HIGH);
 2c6:	4f ef       	ldi	r20, 0xFF	; 255
 2c8:	60 e1       	ldi	r22, 0x10	; 16
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0b df       	rcall	.-490    	; 0xe4 <gpioPinWrite>
	SPDR = Copy_u8Data; //send data
 2ce:	cf b9       	out	0x0f, r28	; 15
	while(!(SPSR & (1<<SPIF)));
 2d0:	77 9b       	sbis	0x0e, 7	; 14
 2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <SPI_Transceiver+0xe>
	SPSR|=(1<<SPIF);
 2d4:	77 9a       	sbi	0x0e, 7	; 14
	return SPDR ; // Received data
 2d6:	8f b1       	in	r24, 0x0f	; 15
}
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
